from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
import sqlite3
import re
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = '8078259711:AAE8VCU7sZtseyjKOG9N5oYgiizjiGH9iDw'
ADMIN_IDS = [5488211744, 1135087806]
DATABASE_NAME = 'tournaments.db'
SUPPORTED_GAMES = ['Dota 2', 'CS2', 'Fortnite', 'LoL', 'Warface', 'Valorant']

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
conn = sqlite3.connect(DATABASE_NAME)
cursor = conn.cursor()

# ===================== –ö–õ–ê–°–°–´ –°–û–°–¢–û–Ø–ù–ò–ô ===================== #
class AddTournament(StatesGroup):
    name = State()
    game = State()
    date = State()
    prize = State()
    rules = State()
    max_teams = State()

class EditTournament(StatesGroup):
    select = State()
    field = State()
    value = State()

class RegisterTeam(StatesGroup):
    tournament_id = State()
    team_name = State()
    captain_name = State()
    contact = State()
    players = State()

# ===================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===================== #
def admin_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä'),
           types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä'))
    kb.add(types.KeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä'),
           types.KeyboardButton('–°–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤'))
    kb.add(types.KeyboardButton('–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥'),
           types.KeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'))
    return kb

def user_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton('–°–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤'),
           types.KeyboardButton('–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã'))
    return kb

def cancel_kb():
    return types.ReplyKeyboardMarkup(resize_keyboard=True).add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))

def games_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for game in SUPPORTED_GAMES:
        kb.add(types.KeyboardButton(game))
    kb.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
    return kb

def get_active_tournaments():
    cursor.execute("SELECT * FROM tournaments WHERE is_active = 1 ORDER BY date")
    return cursor.fetchall()

def get_tournament_by_id(tournament_id):
    cursor.execute("SELECT * FROM tournaments WHERE id = ?", (tournament_id,))
    return cursor.fetchone()

def get_tournament_teams(tournament_id):
    cursor.execute("SELECT * FROM teams WHERE tournament_id = ?", (tournament_id,))
    return cursor.fetchall()

def get_user_teams(user_id):
    cursor.execute("""
        SELECT t.*, tr.name 
        FROM teams t 
        JOIN tournaments tr ON t.tournament_id = tr.id 
        WHERE t.contact = ? AND tr.is_active = 1
    """, (str(user_id),))
    return cursor.fetchall()

def is_admin(user_id):
    return user_id in ADMIN_IDS

# ===================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ===================== #
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if is_admin(message.from_user.id):
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=admin_kb())
    else:
        await message.answer(
            "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∫–∏–±–µ—Ä—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tournaments –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤",
            reply_markup=user_kb()
        )

@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    help_text = """
ü§ñ <b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>

üèÜ <b>–î–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>
/tournaments - –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
/my_teams - –ú–æ–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã

‚öôÔ∏è <b>–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>
/add_tournament - –î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä
/edit_tournament - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä
/delete_tournament - –£–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    """
    await message.answer(help_text, parse_mode='HTML')

# ===================== –¢–£–†–ù–ò–†–´ ===================== #
@dp.message_handler(commands=['tournaments'])
async def show_tournaments(message: types.Message):
    tournaments = get_active_tournaments()
    
    if not tournaments:
        await message.answer("üîç –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤.")
        return
    
    for tournament in tournaments:
        teams_count = len(get_tournament_teams(tournament[0]))
        
        text = (
            f"üèÜ <b>{tournament[1]}</b> ({tournament[2]})\n"
            f"üìÖ –î–∞—Ç–∞: {tournament[3]}\n"
            f"üí∞ –ü—Ä–∏–∑: {tournament[4]}\n"
            f"üë• –ö–æ–º–∞–Ω–¥: {teams_count}/{tournament[6]}\n"
            f"üìå –ü—Ä–∞–≤–∏–ª–∞: {tournament[5][:100]}..." if len(tournament[5]) > 100 else f"üìå –ü—Ä–∞–≤–∏–ª–∞: {tournament[5]}"
        )
        
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(
            text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", 
            callback_data=f"reg_{tournament[0]}"
        ))
        if is_admin(message.from_user.id):
            kb.add(types.InlineKeyboardButton(
                text="–£–¥–∞–ª–∏—Ç—å", 
                callback_data=f"del_{tournament[0]}"
            ))
        
        await message.answer(text, reply_markup=kb, parse_mode='HTML')

@dp.message_handler(lambda message: message.text == '–°–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤')
async def show_tournaments_button(message: types.Message):
    await show_tournaments(message)

# ===================== –ê–î–ú–ò–ù: –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–£–†–ù–ò–†–ê ===================== #
@dp.message_handler(commands=['add_tournament'])
@dp.message_handler(lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä' and is_admin(message.from_user.id))
async def add_tournament_start(message: types.Message):
    await AddTournament.name.set()
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:", reply_markup=cancel_kb())

@dp.message_handler(state=AddTournament.name)
async def set_tournament_name(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await state.finish()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_kb())
        return
    
    await state.update_data(name=message.text)
    await AddTournament.next()
    await message.answer("üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=games_kb())

@dp.message_handler(state=AddTournament.game)
async def set_tournament_game(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await state.finish()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_kb())
        return
    
    if message.text not in SUPPORTED_GAMES:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞!", reply_markup=games_kb())
        return
    
    await state.update_data(game=message.text)
    await AddTournament.next()
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ç—É—Ä–Ω–∏—Ä–∞ (–¥–¥.–º–º.–≥–≥–≥–≥):", reply_markup=cancel_kb())

@dp.message_handler(state=AddTournament.date)
async def set_tournament_date(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await state.finish()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_kb())
        return
    
    if not re.match(r'\d{2}\.\d{2}\.\d{4}', message.text):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥")
        return
    
    await state.update_data(date=message.text)
    await AddTournament.next()
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥:", reply_markup=cancel_kb())

@dp.message_handler(state=AddTournament.prize)
async def set_tournament_prize(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await state.finish()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_kb())
        return
    
    await state.update_data(prize=message.text)
    await AddTournament.next()
    await message.answer("üìú –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞:", reply_markup=cancel_kb())

@dp.message_handler(state=AddTournament.rules)
async def set_tournament_rules(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await state.finish()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_kb())
        return
    
    await state.update_data(rules=message.text)
    await AddTournament.next()
    await message.answer("üë• –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥:", reply_markup=cancel_kb())

@dp.message_handler(state=AddTournament.max_teams)
async def set_tournament_max_teams(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await state.finish()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_kb())
        return
    
    try:
        max_teams = int(message.text)
        if max_teams <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!")
        return
    
    data = await state.get_data()
    cursor.execute(
        "INSERT INTO tournaments (name, game, date, prize, rules, max_teams) VALUES (?, ?, ?, ?, ?, ?)",
        (data['name'], data['game'], data['date'], data['prize'], data['rules'], max_teams)
    )
    conn.commit()
    
    await message.answer(
        f"‚úÖ –¢—É—Ä–Ω–∏—Ä <b>{data['name']}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
        reply_markup=admin_kb(),
        parse_mode='HTML'
    )
    await state.finish()

# ===================== –ê–î–ú–ò–ù: –£–î–ê–õ–ï–ù–ò–ï –¢–£–†–ù–ò–†–ê ===================== #
@dp.message_handler(commands=['delete_tournament'])
@dp.message_handler(lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä' and is_admin(message.from_user.id))
async def delete_tournament_start(message: types.Message):
    tournaments = get_active_tournaments()
    
    if not tournaments:
        await message.answer("üîç –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    
    kb = types.InlineKeyboardMarkup()
    for tournament in tournaments:
        kb.add(types.InlineKeyboardButton(
            text=f"{tournament[1]} ({tournament[2]})", 
            callback_data=f"del_{tournament[0]}"
        ))
    
    await message.answer("üóë –í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('del_'))
async def process_delete_tournament(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("üö´ –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    tournament_id = int(callback.data.split('_')[1])
    cursor.execute("UPDATE tournaments SET is_active = 0 WHERE id = ?", (tournament_id,))
    conn.commit()
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã —ç—Ç–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
    cursor.execute("DELETE FROM teams WHERE tournament_id = ?", (tournament_id,))
    conn.commit()
    
    await callback.message.edit_text("‚úÖ –¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    await callback.answer()

# ===================== –ê–î–ú–ò–ù: –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –¢–£–†–ù–ò–†–ê ===================== #
@dp.message_handler(commands=['edit_tournament'])
@dp.message_handler(lambda message: message.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä' and is_admin(message.from_user.id))
async def edit_tournament_start(message: types.Message):
    tournaments = get_active_tournaments()
    
    if not tournaments:
        await message.answer("üîç –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return
    
    kb = types.InlineKeyboardMarkup()
    for tournament in tournaments:
        kb.add(types.InlineKeyboardButton(
            text=f"{tournament[1]} ({tournament[2]})", 
            callback_data=f"edit_{tournament[0]}"
        ))
    
    await EditTournament.select.set()
    await message.answer("‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('edit_'), state=EditTournament.select)
async def select_tournament_to_edit(callback: types.CallbackQuery, state: FSMContext):
    tournament_id = int(callback.data.split('_')[1])
    await state.update_data(tournament_id=tournament_id)
    
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton('–ù–∞–∑–≤–∞–Ω–∏–µ'),
           types.KeyboardButton('–î–∞—Ç–∞'))
    kb.add(types.KeyboardButton('–ü—Ä–∏–∑'),
           types.KeyboardButton('–ü—Ä–∞–≤–∏–ª–∞'))
    kb.add(types.KeyboardButton('–ú–∞–∫—Å. –∫–æ–º–∞–Ω–¥'),
           types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
    
    await EditTournament.field.set()
    await callback.message.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb)
    await callback.answer()

@dp.message_handler(state=EditTournament.field)
async def select_field_to_edit(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await state.finish()
        await message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_kb())
        return
    
    valid_fields = ['–ù–∞–∑–≤–∞–Ω–∏–µ', '–î–∞—Ç–∞', '–ü—Ä–∏–∑', '–ü—Ä–∞–≤–∏–ª–∞', '–ú–∞–∫—Å. –∫–æ–º–∞–Ω–¥']
    if message.text not in valid_fields:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –∏–∑ —Å–ø–∏—Å–∫–∞!")
        return
    
    await state.update_data(field=message.text)
    await EditTournament.value.set()
    await message.answer(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è '{message.text}':", reply_markup=cancel_kb())

@dp.message_handler(state=EditTournament.value)
async def set_new_value(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await state.finish()
        await message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_kb())
        return
    
    data = await state.get_data()
    field = data['field']
    tournament_id = data['tournament_id']
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if field == '–ú–∞–∫—Å. –∫–æ–º–∞–Ω–¥':
        try:
            value = int(message.text)
            if value <= 0:
                raise ValueError
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!")
            return
    elif field == '–î–∞—Ç–∞':
        if not re.match(r'\d{2}\.\d{2}\.\d{4}', message.text):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥")
            return
        value = message.text
    else:
        value = message.text
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î
    db_fields = {
        '–ù–∞–∑–≤–∞–Ω–∏–µ': 'name',
        '–î–∞—Ç–∞': 'date',
        '–ü—Ä–∏–∑': 'prize',
        '–ü—Ä–∞–≤–∏–ª–∞': 'rules',
        '–ú–∞–∫—Å. –∫–æ–º–∞–Ω–¥': 'max_teams'
    }
    
    cursor.execute(
        f"UPDATE tournaments SET {db_fields[field]} = ? WHERE id = ?",
        (value, tournament_id)
    )
    conn.commit()
    
    await message.answer(
        f"‚úÖ –ü–æ–ª–µ '{field}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
        reply_markup=admin_kb()
    )
    await state.finish()

# ===================== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ö–û–ú–ê–ù–î ===================== #
@dp.callback_query_handler(lambda c: c.data.startswith('reg_'))
async def register_team_start(callback: types.CallbackQuery, state: FSMContext):
    tournament_id = int(callback.data.split('_')[1])
    tournament = get_tournament_by_id(tournament_id)
    
    if not tournament:
        await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    teams = get_tournament_teams(tournament_id)
    if len(teams) >= tournament[6]:
        await callback.answer("‚ùå –ù–∞–±—Ä–∞–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    user_teams = get_user_teams(callback.from_user.id)
    for team in user_teams:
        if team[1] == tournament_id:
            await callback.answer("‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä!")
            return
    
    await state.set_state(RegisterTeam.tournament_id)
    await state.update_data(tournament_id=tournament_id)
    
    await callback.message.answer(
        f"üèÜ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ç—É—Ä–Ω–∏—Ä: <b>{tournament[1]}</b>\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:",
        reply_markup=cancel_kb(),
        parse_mode='HTML'
    )
    await callback.answer()

@dp.message_handler(state=RegisterTeam.team_name)
async def set_team_name(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await state.finish()
        await message.answer("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
        return
    
    await state.update_data(team_name=message.text)
    await RegisterTeam.next()
    await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–∞–ø–∏—Ç–∞–Ω–∞:", reply_markup=cancel_kb())

@dp.message_handler(state=RegisterTeam.captain_name)
async def set_captain_name(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await state.finish()
        await message.answer("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
        return
    
    await state.update_data(captain_name=message.text)
    await RegisterTeam.next()
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏:", reply_markup=cancel_kb())

@dp.message_handler(state=RegisterTeam.contact)
async def set_contact(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await state.finish()
        await message.answer("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
        return
    
    await state.update_data(contact=message.text)
    await RegisterTeam.next()
    await message.answer("üë• –í–≤–µ–¥–∏—Ç–µ —Å–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã (–Ω–∏–∫–Ω–µ–π–º—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):", reply_markup=cancel_kb())

@dp.message_handler(state=RegisterTeam.players)
async def set_players(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await state.finish()
        await message.answer("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
        return
    
    data = await state.get_data()
    cursor.execute(
        "INSERT INTO teams (tournament_id, team_name, captain_name, contact, players) VALUES (?, ?, ?, ?, ?)",
        (data['tournament_id'], data['team_name'], data['captain_name'], data['contact'], message.text)
    )
    conn.commit()
    
    tournament = get_tournament_by_id(data['tournament_id'])
    await message.answer(
        f"‚úÖ –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ <b>{data['team_name']}</b> —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä <b>{tournament[1]}</b>!\n"
        f"üìÖ –î–∞—Ç–∞: {tournament[3]}\n"
        f"üìú –ü—Ä–∞–≤–∏–ª–∞: {tournament[5]}",
        reply_markup=types.ReplyKeyboardRemove(),
        parse_mode='HTML'
    )
    await state.finish()

# ===================== –ú–û–ò –ö–û–ú–ê–ù–î–´ ===================== #
@dp.message_handler(commands=['my_teams'])
@dp.message_handler(lambda message: message.text == '–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã')
async def show_my_teams(message: types.Message):
    teams = get_user_teams(message.from_user.id)
    
    if not teams:
        await message.answer("üîç –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
        return
    
    response = "üë• <b>–í–∞—à–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
    for team in teams:
        tournament = get_tournament_by_id(team[1])
        response += (
            f"üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament[1]}\n"
            f"üè∑ –ö–æ–º–∞–Ω–¥–∞: {team[2]}\n"
            f"üë§ –ö–∞–ø–∏—Ç–∞–Ω: {team[3]}\n"
            f"üë• –°–æ—Å—Ç–∞–≤: {team[5]}\n\n"
        )
    
    await message.answer(response, parse_mode='HTML')

# ===================== –ê–î–ú–ò–ù: –°–ü–ò–°–û–ö –ö–û–ú–ê–ù–î ===================== #
@dp.message_handler(lambda message: message.text == '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥' and is_admin(message.from_user.id))
async def show_all_teams(message: types.Message):
    cursor.execute("""
        SELECT t.id, tr.name, t.team_name, t.captain_name, t.players 
        FROM teams t 
        JOIN tournaments tr ON t.tournament_id = tr.id
        WHERE tr.is_active = 1
    """)
    teams = cursor.fetchall()
    
    if not teams:
        await message.answer("üîç –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
        return
    
    response = "üë• <b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥:</b>\n\n"
    for team in teams:
        response += (
            f"üèÜ –¢—É—Ä–Ω–∏—Ä: {team[1]}\n"
            f"üè∑ –ö–æ–º–∞–Ω–¥–∞: {team[2]}\n"
            f"üë§ –ö–∞–ø–∏—Ç–∞–Ω: {team[3]}\n"
            f"üë• –°–æ—Å—Ç–∞–≤: {team[4]}\n\n"
        )
    
    await message.answer(response, parse_mode='HTML')

# ===================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===================== #
@dp.message_handler(commands=['stats'])
@dp.message_handler(lambda message: message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' and is_admin(message.from_user.id))
async def show_stats(message: types.Message):
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    cursor.execute("SELECT COUNT(*) FROM tournaments WHERE is_active = 1")
    active_tournaments = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM teams")
    total_teams = cursor.fetchone()[0]
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º
    cursor.execute("""
        SELECT game, COUNT(*) as count 
        FROM tournaments 
        WHERE is_active = 1 
        GROUP BY game
    """)
    games_stats = cursor.fetchall()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö
    cursor.execute("""
        SELECT t.name, COUNT(te.id) as team_count
        FROM tournaments t
        LEFT JOIN teams te ON t.id = te.tournament_id
        WHERE t.is_active = 1
        GROUP BY t.id
    """)
    tournament_stats = cursor.fetchall()
    
    text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üèÜ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤: {active_tournaments}\n"
        f"üë• –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: {total_teams}\n\n"
        f"üéÆ –ü–æ –∏–≥—Ä–∞–º:\n"
    )
    
    for game, count in games_stats:
        text += f"‚Ä¢ {game}: {count} —Ç—É—Ä–Ω–∏—Ä–æ–≤\n"
    
    text += f"\nüìà –ü–æ —Ç—É—Ä–Ω–∏—Ä–∞–º:\n"
    for tournament_name, team_count in tournament_stats:
        text += f"‚Ä¢ {tournament_name}: {team_count} –∫–æ–º–∞–Ω–¥\n"
    
    await message.answer(text, parse_mode='HTML')

# ===================== –û–ë–†–ê–ë–û–¢–ö–ê –ù–ï–ò–ó–í–ï–°–¢–ù–´–• –ö–û–ú–ê–ù–î ===================== #
@dp.message_handler()
async def unknown_command(message: types.Message):
    if is_admin(message.from_user.id):
        await message.answer("ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.", reply_markup=admin_kb())
    else:
        await message.answer("ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.", reply_markup=user_kb())

# ===================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ===================== #
if __name__ == '__main__':
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS tournaments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            game TEXT NOT NULL,
            date TEXT NOT NULL,
            prize TEXT,
            rules TEXT,
            max_teams INTEGER,
            is_active BOOLEAN DEFAULT 1,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        ''')
        
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS teams (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            tournament_id INTEGER,
            team_name TEXT NOT NULL,
            captain_name TEXT NOT NULL,
            contact TEXT NOT NULL,
            players TEXT,
            registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (tournament_id) REFERENCES tournaments (id)
        )
        ''')
        conn.commit()
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        executor.start_polling(dp, skip_updates=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        conn.close()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")